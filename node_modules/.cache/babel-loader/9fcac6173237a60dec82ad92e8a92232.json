{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n\n  isEmpty() {\n    return this.figure === null;\n  }\n\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.min(this.y, target.y);\n\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyHorizontal(target) {\n    return true;\n  }\n\n  isEmptyDiagonal(target) {\n    return true;\n  }\n\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n\n  moveFigure(target) {\n    var _this$figure;\n\n    if (this.figure && ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.canMove(target))) {\n      this.figure.moveFigore(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Samsung_T5/mac/Programming/JS/Projects/react/chess/react-chess-init/src/models/Cell.ts"],"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmpty","isEmptyVertical","target","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","setFigure","cell","moveFigure","canMove","moveFigore"],"mappings":"AAIA,OAAO,MAAMA,IAAN,CAAW;AASdC,EAAAA,WAAW,CAACC,KAAD,EAAeC,CAAf,EAA0BC,CAA1B,EAAqCC,KAArC,EAAoDC,MAApD,EAA2E;AAAA,SAR7EH,CAQ6E;AAAA,SAP7EC,CAO6E;AAAA,SAN7EC,KAM6E;AAAA,SALtFC,MAKsF;AAAA,SAJtFJ,KAIsF;AAAA,SAHtFK,SAGsF;AAAA,SAFtFC,EAEsF;AAClF,SAAKL,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKK,SAAL,GAAiB,KAAjB;AACA,SAAKC,EAAL,GAAUC,IAAI,CAACC,MAAL,EAAV;AACH;;AAEDC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKL,MAAL,KAAgB,IAAvB;AACH;;AAEDM,EAAAA,eAAe,CAACC,MAAD,EAAwB;AACnC,QAAI,KAAKV,CAAL,KAAWU,MAAM,CAACV,CAAtB,EAAyB;AACrB,aAAO,KAAP;AACH;;AAED,UAAMW,GAAG,GAAGL,IAAI,CAACK,GAAL,CAAS,KAAKV,CAAd,EAAiBS,MAAM,CAACT,CAAxB,CAAZ;AACA,UAAMW,GAAG,GAAGN,IAAI,CAACK,GAAL,CAAS,KAAKV,CAAd,EAAiBS,MAAM,CAACT,CAAxB,CAAZ;;AACA,SAAK,IAAIA,CAAC,GAAGU,GAAG,GAAG,CAAnB,EAAsBV,CAAC,GAAGW,GAA1B,EAA+BX,CAAC,EAAhC,EAAoC;AAChC,UAAI,CAAC,KAAKF,KAAL,CAAWc,OAAX,CAAmB,KAAKb,CAAxB,EAA2BC,CAA3B,EAA8BO,OAA9B,EAAL,EAA8C;AAC1C,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AAEDM,EAAAA,iBAAiB,CAACJ,MAAD,EAAwB;AACrC,WAAO,IAAP;AACH;;AAEDK,EAAAA,eAAe,CAACL,MAAD,EAAwB;AACnC,WAAO,IAAP;AACH;;AAEDM,EAAAA,SAAS,CAACb,MAAD,EAAiB;AACtB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKA,MAAL,CAAYc,IAAZ,GAAmB,IAAnB;AACH;;AAEDC,EAAAA,UAAU,CAACR,MAAD,EAAe;AAAA;;AACrB,QAAI,KAAKP,MAAL,qBAAe,KAAKA,MAApB,iDAAe,aAAagB,OAAb,CAAqBT,MAArB,CAAf,CAAJ,EAAiD;AAC7C,WAAKP,MAAL,CAAYiB,UAAZ,CAAuBV,MAAvB;AACAA,MAAAA,MAAM,CAACM,SAAP,CAAiB,KAAKb,MAAtB;AACA,WAAKA,MAAL,GAAc,IAAd;AACH;AACJ;;AAzDa","sourcesContent":["import { Board } from \"./Board\";\nimport { Colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmpty() {\n        return this.figure === null;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if (this.x !== target.x) {\n            return false\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.min(this.y, target.y);\n        for (let y = min + 1; y < max; y++) {\n            if (!this.board.getCell(this.x, y).isEmpty()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        return true\n    }\n\n    isEmptyDiagonal(target: Cell): boolean {\n        return true\n    }\n\n    setFigure(figure: Figure) {\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    moveFigure(target: Cell) {\n        if (this.figure && this.figure?.canMove(target)) {\n            this.figure.moveFigore(target)\n            target.setFigure(this.figure);\n            this.figure = null\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}