{"ast":null,"code":"import { Colors } from \"../Colors\";\nimport { Figure, FigureNames } from \"./Figure\";\nimport blackLogo from \"../../assets/black-pawn.png\";\nimport whiteLogo from \"../../assets/white-pawn.png\";\nexport class Pawn extends Figure {\n  constructor(color, cell) {\n    super(color, cell);\n    this.isFirstStep = true;\n    this.logo = color === Colors.BLACK ? blackLogo : whiteLogo;\n    this.name = FigureNames.PAWN;\n  }\n\n  canMove(target) {\n    var _this$cell$figure, _this$cell$figure2;\n\n    if (!super.canMove(target)) return false;\n    const direction = ((_this$cell$figure = this.cell.figure) === null || _this$cell$figure === void 0 ? void 0 : _this$cell$figure.color) === Colors.BLACK ? 1 : -1;\n    const firstStepDirection = ((_this$cell$figure2 = this.cell.figure) === null || _this$cell$figure2 === void 0 ? void 0 : _this$cell$figure2.color) === Colors.BLACK ? 2 : -2;\n\n    if ((target.y === this.cell.y + direction || this.isFirstStep && target.y === this.cell.y + firstStepDirection) && target.x === this.cell.x && this.cell.board.getCell(target.x, target.y).isEmpty()) {\n      return true;\n    }\n\n    if (target.y === this.cell.y + direction && (target.x === this.cell.x + 1 || target.x === this.cell.x - 1) && this.cell.isEnemy(target)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFigure(target) {\n    super.moveFigure(target);\n    this.isFirstStep = false;\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Samsung_T5/mac/Programming/JS/Projects/react/chess/src/models/figures/Pawn.ts"],"names":["Colors","Figure","FigureNames","blackLogo","whiteLogo","Pawn","constructor","color","cell","isFirstStep","logo","BLACK","name","PAWN","canMove","target","direction","figure","firstStepDirection","y","x","board","getCell","isEmpty","isEnemy","moveFigure"],"mappings":"AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,UAApC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAGA,OAAO,MAAMC,IAAN,SAAmBJ,MAAnB,CAA0B;AAI7BK,EAAAA,WAAW,CAACC,KAAD,EAAgBC,IAAhB,EAA4B;AACnC,UAAMD,KAAN,EAAaC,IAAb;AADmC,SAFvCC,WAEuC,GAFhB,IAEgB;AAEnC,SAAKC,IAAL,GAAYH,KAAK,KAAKP,MAAM,CAACW,KAAjB,GAAyBR,SAAzB,GAAqCC,SAAjD;AACA,SAAKQ,IAAL,GAAYV,WAAW,CAACW,IAAxB;AACH;;AAEDC,EAAAA,OAAO,CAACC,MAAD,EAAwB;AAAA;;AAC3B,QAAI,CAAC,MAAMD,OAAN,CAAcC,MAAd,CAAL,EACI,OAAO,KAAP;AACJ,UAAMC,SAAS,GAAG,2BAAKR,IAAL,CAAUS,MAAV,wEAAkBV,KAAlB,MAA4BP,MAAM,CAACW,KAAnC,GAA2C,CAA3C,GAA8C,CAAC,CAAjE;AACA,UAAMO,kBAAkB,GAAG,4BAAKV,IAAL,CAAUS,MAAV,0EAAkBV,KAAlB,MAA4BP,MAAM,CAACW,KAAnC,GAA2C,CAA3C,GAA8C,CAAC,CAA1E;;AAEA,QAAI,CAACI,MAAM,CAACI,CAAP,KAAa,KAAKX,IAAL,CAAUW,CAAV,GAAcH,SAA3B,IAAwC,KAAKP,WAAL,IACrCM,MAAM,CAACI,CAAP,KAAa,KAAKX,IAAL,CAAUW,CAAV,GAAcD,kBAD/B,KAEDH,MAAM,CAACK,CAAP,KAAa,KAAKZ,IAAL,CAAUY,CAFtB,IAGD,KAAKZ,IAAL,CAAUa,KAAV,CAAgBC,OAAhB,CAAwBP,MAAM,CAACK,CAA/B,EAAkCL,MAAM,CAACI,CAAzC,EAA4CI,OAA5C,EAHH,EAG0D;AACtD,aAAO,IAAP;AACH;;AAED,QAAIR,MAAM,CAACI,CAAP,KAAa,KAAKX,IAAL,CAAUW,CAAV,GAAcH,SAA3B,KACAD,MAAM,CAACK,CAAP,KAAa,KAAKZ,IAAL,CAAUY,CAAV,GAAc,CAA3B,IAAgCL,MAAM,CAACK,CAAP,KAAa,KAAKZ,IAAL,CAAUY,CAAV,GAAc,CAD3D,KAED,KAAKZ,IAAL,CAAUgB,OAAV,CAAkBT,MAAlB,CAFH,EAE8B;AAC1B,aAAO,IAAP;AACH;;AAGD,WAAO,KAAP;AACH;;AAEDU,EAAAA,UAAU,CAACV,MAAD,EAAqB;AAC3B,UAAMU,UAAN,CAAiBV,MAAjB;AACA,SAAKN,WAAL,GAAmB,KAAnB;AACH;;AApC4B","sourcesContent":["import { Cell } from \"../Cell\";\nimport { Colors } from \"../Colors\";\nimport { Figure, FigureNames } from \"./Figure\";\nimport blackLogo from \"../../assets/black-pawn.png\";\nimport whiteLogo from \"../../assets/white-pawn.png\";\n\n\nexport class Pawn extends Figure {\n\n    isFirstStep: boolean = true;\n\n    constructor(color: Colors, cell: Cell) {\n        super(color, cell);\n        this.logo = color === Colors.BLACK ? blackLogo : whiteLogo;\n        this.name = FigureNames.PAWN;\n    }\n\n    canMove(target: Cell): boolean {\n        if (!super.canMove(target))\n            return false;\n        const direction = this.cell.figure?.color === Colors.BLACK ? 1: -1;\n        const firstStepDirection = this.cell.figure?.color === Colors.BLACK ? 2: -2;\n\n        if ((target.y === this.cell.y + direction || this.isFirstStep\n            && (target.y === this.cell.y + firstStepDirection)) \n        && target.x === this.cell.x\n        && this.cell.board.getCell(target.x, target.y).isEmpty()) {\n            return true;\n        }\n\n        if (target.y === this.cell.y + direction\n        && (target.x === this.cell.x + 1 || target.x === this.cell.x - 1)\n        && this.cell.isEnemy(target)) {\n            return true;\n        }\n        \n\n        return false;\n    }\n\n    moveFigure(target: Cell): void {\n        super.moveFigure(target);\n        this.isFirstStep = false;\n    }\n}"]},"metadata":{},"sourceType":"module"}