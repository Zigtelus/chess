{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    return newBoard;\n  }\n\n  hightLightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j++) {\n        var _selectedCell$figure;\n\n        const target = row[j];\n        target.available = !!(selectedCell === null || selectedCell === void 0 ? void 0 : (_selectedCell$figure = selectedCell.figure) === null || _selectedCell$figure === void 0 ? void 0 : _selectedCell$figure.canMove(target));\n      }\n    }\n  }\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addKings();\n    this.addQueens();\n    this.addBishops();\n    this.addKnights();\n    this.addRooks();\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Samsung_T5/mac/Programming/JS/Projects/react/chess/react-chess-init/src/models/Board.ts"],"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","cells","initCells","i","row","j","push","BLACK","WHITE","getCopyBoard","newBoard","hightLightCells","selectedCell","length","target","available","figure","canMove","getCell","x","y","addPawns","addKings","addQueens","addBishops","addKnights","addRooks","addFigures"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA,OAAO,MAAMC,KAAN,CAAY;AAAA;AAAA,SACfC,KADe,GACG,EADH;AAAA;;AAGRC,EAAAA,SAAS,GAAG;AACf,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAMC,GAAW,GAAG,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAI,CAACF,CAAC,GAAGE,CAAL,IAAU,CAAV,KAAgB,CAApB,EAAuB;AACnBD,UAAAA,GAAG,CAACE,IAAJ,CAAS,IAAId,IAAJ,CAAS,IAAT,EAAea,CAAf,EAAkBF,CAAlB,EAAqBV,MAAM,CAACc,KAA5B,EAAmC,IAAnC,CAAT;AACH,SAFD,MAEO;AACHH,UAAAA,GAAG,CAACE,IAAJ,CAAS,IAAId,IAAJ,CAAS,IAAT,EAAea,CAAf,EAAkBF,CAAlB,EAAqBV,MAAM,CAACe,KAA5B,EAAmC,IAAnC,CAAT;AACH;AACJ;;AACD,WAAKP,KAAL,CAAWK,IAAX,CAAgBF,GAAhB;AACH;AACJ;;AAEMK,EAAAA,YAAY,GAAU;AACzB,UAAMC,QAAQ,GAAG,IAAIV,KAAJ,EAAjB;AACAU,IAAAA,QAAQ,CAACT,KAAT,GAAiB,KAAKA,KAAtB;AACA,WAAOS,QAAP;AACH;;AAEMC,EAAAA,eAAe,CAACC,YAAD,EAA4B;AAC9C,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,KAAL,CAAWY,MAA/B,EAAuCV,CAAC,EAAxC,EAA4C;AACxC,YAAMC,GAAG,GAAG,KAAKH,KAAL,CAAWE,CAAX,CAAZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACS,MAAxB,EAAgCR,CAAC,EAAjC,EAAqC;AAAA;;AACjC,cAAMS,MAAM,GAAGV,GAAG,CAACC,CAAD,CAAlB;AACAS,QAAAA,MAAM,CAACC,SAAP,GAAmB,CAAC,EAACH,YAAD,aAACA,YAAD,+CAACA,YAAY,CAAEI,MAAf,yDAAC,qBAAsBC,OAAtB,CAA8BH,MAA9B,CAAD,CAApB;AACH;AACJ;AACJ;;AAEMI,EAAAA,OAAO,CAACC,CAAD,EAAYC,CAAZ,EAAuB;AACjC,WAAO,KAAKnB,KAAL,CAAWmB,CAAX,EAAcD,CAAd,CAAP;AACH;;AAEOE,EAAAA,QAAQ,GAAG;AACf,SAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIN,IAAJ,CAASJ,MAAM,CAACc,KAAhB,EAAuB,KAAKW,OAAL,CAAaf,CAAb,EAAgB,CAAhB,CAAvB;AACA,UAAIN,IAAJ,CAASJ,MAAM,CAACe,KAAhB,EAAuB,KAAKU,OAAL,CAAaf,CAAb,EAAgB,CAAhB,CAAvB;AACH;AACJ;;AAEOmB,EAAAA,QAAQ,GAAG;AACf,QAAI3B,IAAJ,CAASF,MAAM,CAACc,KAAhB,EAAuB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACA,QAAIvB,IAAJ,CAASF,MAAM,CAACe,KAAhB,EAAuB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACH;;AAEOK,EAAAA,SAAS,GAAG;AAChB,QAAIzB,KAAJ,CAAUL,MAAM,CAACc,KAAjB,EAAwB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAxB;AACA,QAAIpB,KAAJ,CAAUL,MAAM,CAACe,KAAjB,EAAwB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAxB;AACH;;AAEOM,EAAAA,UAAU,GAAG;AACjB,QAAI9B,MAAJ,CAAWD,MAAM,CAACc,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,QAAIxB,MAAJ,CAAWD,MAAM,CAACc,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,QAAIxB,MAAJ,CAAWD,MAAM,CAACe,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,QAAIxB,MAAJ,CAAWD,MAAM,CAACe,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACH;;AAEOO,EAAAA,UAAU,GAAG;AACjB,QAAI7B,MAAJ,CAAWH,MAAM,CAACc,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,QAAItB,MAAJ,CAAWH,MAAM,CAACc,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,QAAItB,MAAJ,CAAWH,MAAM,CAACe,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,QAAItB,MAAJ,CAAWH,MAAM,CAACe,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;AACH;;AAEOQ,EAAAA,QAAQ,GAAG;AACf,QAAI3B,IAAJ,CAASN,MAAM,CAACc,KAAhB,EAAuB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACA,QAAInB,IAAJ,CAASN,MAAM,CAACc,KAAhB,EAAuB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACA,QAAInB,IAAJ,CAASN,MAAM,CAACe,KAAhB,EAAuB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACA,QAAInB,IAAJ,CAASN,MAAM,CAACe,KAAhB,EAAuB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;AACH;;AAEMS,EAAAA,UAAU,GAAG;AAChB,SAAKN,QAAL;AACA,SAAKC,QAAL;AACA,SAAKC,SAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,QAAL;AACH;;AAlFc","sourcesContent":["import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\n\nexport class Board {\n    cells: Cell[][] = []\n\n    public initCells() {\n        for (let i = 0; i < 8; i++) {\n            const row: Cell[] = []\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 !== 0) {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null))\n                } else {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null))\n                }\n            }\n            this.cells.push(row)\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board();\n        newBoard.cells = this.cells\n        return newBoard\n    }\n\n    public hightLightCells(selectedCell: Cell | null) {\n        for (let i = 0; i < this.cells.length; i++) {\n            const row = this.cells[i];\n            for (let j = 0; j < row.length; j++) {\n                const target = row[j];\n                target.available = !!selectedCell?.figure?.canMove(target)\n            }\n        }\n    }\n\n    public getCell(x: number, y: number) {\n        return this.cells[y][x]\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i++) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\n        }\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(4, 0))\n        new King(Colors.WHITE, this.getCell(4, 7))\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(3, 0))\n        new Queen(Colors.WHITE, this.getCell(3, 7))\n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\n    }\n\n    private addKnights() {\n        new Knight(Colors.BLACK, this.getCell(1, 0))\n        new Knight(Colors.BLACK, this.getCell(6, 0))\n        new Knight(Colors.WHITE, this.getCell(1, 7))\n        new Knight(Colors.WHITE, this.getCell(6, 7))\n    }\n\n    private addRooks() {\n        new Rook(Colors.BLACK, this.getCell(0, 0))\n        new Rook(Colors.BLACK, this.getCell(7, 0))\n        new Rook(Colors.WHITE, this.getCell(0, 7))\n        new Rook(Colors.WHITE, this.getCell(7, 7))\n    }\n\n    public addFigures() {\n        this.addPawns()\n        this.addKings()\n        this.addQueens()\n        this.addBishops()\n        this.addKnights()\n        this.addRooks()\n    }\n}"]},"metadata":{},"sourceType":"module"}