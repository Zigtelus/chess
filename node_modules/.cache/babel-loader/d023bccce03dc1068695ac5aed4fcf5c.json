{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n\n  isEmpty() {\n    return this.figure === null;\n  }\n\n  isEnemy(target) {\n    if (target.figure) {\n      var _this$figure;\n\n      return ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.color) !== target.figure.color;\n    }\n\n    return false;\n  }\n\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n\n    if (absY !== absX) {\n      return false;\n    }\n\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n\n    return true;\n  }\n\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n\n  moveFigure(target) {\n    var _this$figure2;\n\n    if (this.figure && ((_this$figure2 = this.figure) === null || _this$figure2 === void 0 ? void 0 : _this$figure2.canMove(target))) {\n      this.figure.moveFigure(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Samsung_T5/mac/Programming/JS/Projects/react/chess/src/models/Cell.ts"],"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmpty","isEnemy","target","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","cell","moveFigure","canMove"],"mappings":"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","sourcesContent":["import { bool } from \"prop-types\";\nimport { Board } from \"./Board\";\nimport { Colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmpty(): boolean {\n        return this.figure === null;\n    }\n\n    isEnemy(target: Cell): boolean {\n        if (target.figure) {\n            return this.figure?.color !== target.figure.color;\n        }\n\n        return false\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if (this.x !== target.x) {\n            return false\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for (let y = min + 1; y < max; y++) {\n            if (!this.board.getCell(this.x, y).isEmpty()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if (this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for (let x = min + 1; x < max; x++) {\n            if (!this.board.getCell(x, this.y).isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(target.x - this.x);\n        const absY = Math.abs(target.y - this.y);\n\n        if (absY !== absX) {\n            return false;\n        }\n\n        const dy = this.y < target.y ? 1 : -1\n        const dx = this.x < target.x ? 1 : -1\n\n        for (let i = 1; i < absY; i++) {\n            if (!this.board.getCell(this.x + dx*i, this.y + dy * i).isEmpty())\n            return false\n        }\n\n        return true\n    }\n\n    setFigure(figure: Figure) {\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    moveFigure(target: Cell) {\n        if (this.figure && this.figure?.canMove(target)) {\n            this.figure.moveFigure(target);\n            target.setFigure(this.figure);\n            this.figure = null;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}